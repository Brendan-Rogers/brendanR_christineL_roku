import { TimelineMax, Animation } from 'gsap';
import EventDispatcher from 'seng-event';
import { IAbstractTransitionControllerOptions } from './interface/IAbstractTranstitionControllerOptions';
import TransitionDirection from './enum/TransitionDirection';
import TimelineType from './enum/TimelineType';
/**
 * ### AbstractTransitionController
 * The AbstractTransitionController is the main class of the module. See the sub-pages for detailed information about the properties and methods.
 *
 * @param T This param defines the type of the parent controller, this is of course framework specific.
 */
export default abstract class AbstractTransitionController<T> extends EventDispatcher {
    /**
     * @private
     * @static counter
     * @description a namespace counter used for unique naming of components
     * @type {number}
     */
    private static counter;
    /**
     * The parentController gives you access to the class that constructed the
     * transition controller. You might need this if you want to access elements
     * from the parentController. For example in a Vue.js project you might want
     * to access the **$refs** of you Vue.js component to setup your animations.
     *
     * @public
     */
    parentController: T;
    /**
     * The isHidden property gives you the current transition state of the
     * component. A component is either hidden or not.
     *
     * @public
     */
    isHidden: boolean;
    /**
     * The loopingAnimationStarted property gives you the current looping
     * transition state of the component a looping animation is either running or not.
     *
     * @public
     */
    loopingAnimationStarted: boolean;
    /**
     * The transitionInTimeline property is the timeline that is used for the in animation
     * of the component.
     *
     * @public
     */
    transitionInTimeline: TimelineMax;
    /**
     * The transitionOutTimeline property is the timeline that is used for the out
     * animation of the component.
     *
     * @public
     */
    transitionOutTimeline: TimelineMax;
    /**
     * The loopingAnimationTimeline property is the timeline that is used for the looping
     * animations inside of a component. The timeline configuration is setup to loop until pause is called.
     *
     * @public
     */
    loopingAnimationTimeline: TimelineMax;
    /**
     * The resolve method used for resolving the transition in promise.
     *
     * @private
     */
    private transitionInResolveMethod;
    /**
     * The resolve method used for resolving the transition out promise.
     *
     * @private
     */
    private transitionOutResolveMethod;
    /**
     * The reject method used for rejecting the transition in promise.
     *
     * @private
     */
    private transitionInRejectMethod;
    /**
     * The resolve method used for rejecting the transition out promise.
     *
     * @private
     */
    private transitionOutRejectMethod;
    /**
     * The transition promise is used so we can wait for the transition in to be completed.
     *
     * @private
     */
    private transitionInPromise;
    /**
     * The transition promise is used so we can wait for the transition out to be completed.
     *
     * @private
     */
    private _transitionOutPromise;
    /**
     * The options that were provided when constructing the class are stored on this property
     *
     * @private
     */
    private options;
    /**
     * The constructor initiates the class, it merges the default options with the
     * provided options and creates the transition timelines.
     *
     * **Note:** Keep in mind that the moment the transition controller is constructed
     * it also calls the init method that triggers the methods to setup the timelines.
     * So always cconstruct the transition controller after your component is ready.
     *
     * @param {T} parent The reference to the parent instance
     * @param {IAbstractTransitionControllerOptions} options The configuration object for the transition controller
     */
    constructor(parent: T, options?: IAbstractTransitionControllerOptions);
    /**
     * The transitionIn method restarts the transitionInTimeline and returns
     * a promise to let you know that is is done with the animation. By default the
     * transition in will wait for any old transitionOut that is still running. If
     * you want to force your transition in and kill any running transitionOut animations
     * you should set the forceTransition flag to true when calling the transitionIn method.
     *
     * @public
     * @param { boolean } forceTransition
     * @returns { Promise<any> }
     */
    transitionIn(forceTransition?: boolean): Promise<void>;
    /**
  
    /**
     * The transitionOut method will look if the transitionOutTimeline has any
     * animations added to it. If no animations were added it will reverse the
     * transitionInTimeline. Otherwise it will restart the transitionOutTimeline.
     *
     * @public
     * @param {boolean} forceTransition Forcing a transition means that the old transition out will be stopped!
     * @param {string} id This is the id of the transition out timeline that you want to trigger
     * @param {boolean} reset This means that the transition out timeline will be re-initialized.
     * @returns {Promise<void>}
     */
    transitionOut(forceTransition?: boolean, id?: string, reset?: boolean): Promise<void>;
    /**
     * This method is pretty straightforward will start the loopingAnimationTimeline.
     *
     * @param {string} id This is the id of the timeline that you want to start
     * @param {boolean} reset This means that the timeline will be re-initialized.
     */
    startLoopingAnimation(id?: string, reset?: boolean): void;
    /**
     * This method is pretty straightforward will stop the loopingAnimationTimeline.
     *
     * @public
     */
    stopLoopingAnimation(): void;
    /**
     * When nesting transition components you might want to nest the timelines
     * as well, this makes it easier to time all the component transitions. Keep
     * in mind that the getTimeline method returns a clone of the original timeline.
     *
     * @public
     * @param {string | HTMLElement | T} component The selector for the component that you want the timeline for
     * @param {TransitionDirection} direction The direction of the timeline that you want
     * @param {boolean} reset This flag determines if we reset the existing timeline or re-create it from scratch
     * @param {boolean} id This is the id of the timeline that we are requesting
     * @returns { Animation } The timeline that is retrieved
     */
    getTimeline(component: string | HTMLElement | T, direction?: TransitionDirection, reset?: boolean, id?: string): Animation;
    /**
     * @public
     * @param {string | HTMLElement | T} component The selector for the component that you want to get the timeline for
     * @param {TransitionDirection} direction The direction that you want to check for
     * @param {boolean} reset This flag determines if we reset the existing timeline or re-create it from scratch
     * @param {boolean} id This is the id of the timeline that we are requesting
     * @returns {number} The duration of the timeline
     */
    getTimelineDurationForComponent(component: string | HTMLElement | T, direction?: TransitionDirection, reset?: boolean, id?: string): number;
    /**
     * Setup timeline is a wrapper method that calls the correct setup methods and clears any old timelines if necessary
     *
     * @public
     * @param {Timeline} type This is the type of timeline that will be initialized.
     * @param {boolean} reset This means the timeline will be cleared before initializing
     * @param {string} id This is the id of the timeline that should be initialized.
     */
    setupTimeline(type: TimelineType, reset?: boolean, id?: string): void;
    /**
     * This method will be used for setting up the timelines for the component
     *
     * @protected
     */
    protected init(): void;
    /**
     * This method is actually set's up the transition out timeline. it should contain all
     * the animations that are required for the transition out to done.
     *
     * @protected
     * @param {TimelineMax} timeline The reference to the transition out timeline
     * @param {T} parent The reference to the parent instance
     * @param {string} id The id of the transition out timeline that should be initialized
     * @param {boolean} reset When this flag is set to true the old timeline will be cleared before calling the method
     */
    protected abstract setupTransitionOutTimeline(timeline: TimelineMax, parent: T, id: string): void;
    /**
     * This method is actually set's up the transition in timeline. it should contain all
     * the animations that are required for the transition in to done.
     *
     * @protected
     * @param {TimelineMax} timeline The reference to the transition in timeline
     * @param {T} parent The reference to the parent instance
     * @param {string} id The id of the transition in timeline that should be initialized
     */
    protected abstract setupTransitionInTimeline(timeline: TimelineMax, parent: T, id: string): void;
    /**
     * This method is actually set's up the looping timeline. it should contain all
     * the animations that are required for looping.
     *
     * @protected
     * @param {TimelineMax} timeline The reference to the looping timeline
     * @param {T} parent The reference to the parent instance
     * @param {string} id The id of the looping animation that should be initialized
     */
    protected abstract setupLoopingAnimationTimeline(timeline: TimelineMax, parent: T, id: string): void;
    /**
  
     *
     * @protected
     */
    /**
     * Method that should be created based on your framework. It retrieves a
     * component based on a string, HTMLElement or the generic
     *
     * @param
     * @param {string | HTMLElement | T} component The reference to the component
     * @returns {T} The instance of the component that is requested
     */
    protected abstract getComponent(component: string | HTMLElement | T): T;
    /**
     * Method that finds the correct timeline instance on the provided parent controller.
     *
     * @private
     * @param {T} component This is the component instance that will will get the timeline for
     * @param {TransitionDirection} direction This is the direction of the timeline.
     * @param {boolean} reset This flag determines if we reset the existing timeline or re-create it from scratch
     * @param {boolean} id This is the id of the timeline that we are requesting
     * @returns {TimelineMax} This is the timeline instance that you requested
     */
    private getTimelineInstance(component, direction?, reset?, id?);
    /**
     * This method creates the actual empty GSAP timelines.
     *
     * @private
     */
    private createTransitionTimelines();
    /**
     * Method that is triggered when the transition starts. It dispatches the correct
     * event that is linked to the type of transition.
     *
     * @param {TransitionDirection} direction The direction of the timeline that is started
     */
    private handleTransitionStart(direction);
    /**
     * Method that is triggered when the transition completes. It dispatches the correct
     * event that is linked to the type of transition.
     *
     * @private
     * @param { string } direction The direction the transition was completed in.
     */
    private handleTransitionComplete(direction);
    /**
     * Method that cleans all the timelines and strips out all the resolve methods.
     *
     * @private
     */
    private clean();
    /**
     * Because Vue destructs the VM instance before it removes the DOM node we want to finish the
     * transition out before actually cleaning everything
     *
     * @public
     */
    dispose(): void;
}
