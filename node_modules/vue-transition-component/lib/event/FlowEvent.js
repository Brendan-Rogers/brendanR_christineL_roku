"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _sengEvent = require("seng-event");

var _eventTypeUtils = require("seng-event/lib/util/eventTypeUtils");

/**
 * ### FlowEvent
 * The FlowManager uses the seng-event module to dispatch events to notify parent classes about
 * certain events. The following events can be listened to.
 */
var FlowEvent =
/*#__PURE__*/
function (_AbstractEvent) {
  (0, _inheritsLoose2.default)(FlowEvent, _AbstractEvent);

  /**
   * The flow start event indicates that the flow has started
   *
   * @public
   */

  /**
   * The data contains the target of the flow, this is used for detecting flows that end up at the same location.
   *
   * @public
   */

  /**
   * Provided the type + data to construct the flow event
   *
   * @param {string} type The type of the event. Event listeners will only be called if their eventType match this type.
   * @param {{to: IRoute; from: IRoute}} data The data that is linked to the event. It contains the from and to information.
   * @param {boolean} bubbles If true, the event will also go through a bubbling phase.
   * @param {boolean} cancelable Indicates if preventDefault can be called on this event. This will prevent the 'default
   * action' of the event from being executed. It is up to the EventDispatcher instance that dispatches the
   * event to stop the default action from executing when the dispatchEvent
   * method returns _false_
   * @param {boolean} If true, will set the [[timeStamp]] property of this event to the current time whenever
   * this event is dispatched.
   */
  function FlowEvent(type, data, bubbles, cancelable, setTimeStamp) {
    var _this;

    _this = _AbstractEvent.call(this, type, bubbles, cancelable, setTimeStamp) || this;
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "data", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    _this.data = data;
    return _this;
  }
  /**
   * The clone method returns a cloned instance of the original event.
   *
   * @public
   */


  var _proto = FlowEvent.prototype;

  _proto.clone = function clone() {
    return new FlowEvent(this.type, this.data, this.bubbles, this.cancelable);
  };

  return FlowEvent;
}(_sengEvent.AbstractEvent);

Object.defineProperty(FlowEvent, "START", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: _eventTypeUtils.EVENT_TYPE_PLACEHOLDER
});
(0, _eventTypeUtils.generateEventTypes)({
  FlowEvent: FlowEvent
});
var _default = FlowEvent;
exports.default = _default;