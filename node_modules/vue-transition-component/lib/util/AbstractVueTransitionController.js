"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _transitionController = _interopRequireDefault(require("transition-controller"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _isElement = _interopRequireDefault(require("lodash/isElement"));

var AbstractVueTransitionController =
/*#__PURE__*/
function (_AbstractTransitionCo) {
  (0, _inheritsLoose2.default)(AbstractVueTransitionController, _AbstractTransitionCo);

  function AbstractVueTransitionController() {
    return _AbstractTransitionCo.apply(this, arguments) || this;
  }

  var _proto = AbstractVueTransitionController.prototype;

  /**
   * This method finds a component based on a string, a html element or the instance.
   *
   * @protected
   * @param {string | HTMLElement | IAbstractTransitionComponent} component The selector for the component
   * @returns {IAbstractTransitionComponent} The instance of the component you requested
   */
  _proto.getComponent = function getComponent(component) {
    var instance;

    if ((0, _isElement.default)(component)) {
      instance = this.parentController.$children.find(function (child) {
        return child.$el === component;
      });
    } else if ((0, _isString.default)(component)) {
      var instances = this.parentController.$children.map(function (child) {
        return child.componentId === component ? child : null;
      }).filter(function (child) {
        return child !== null;
      });

      if (instances.length > 1) {
        throw new Error("Found multiple components matching [" + component + "], use a unique ref when requesting a component with an id");
      }

      instance = instances.pop();
    } else {
      instance = component;
    }

    if (instance === undefined) {
      throw new Error("The requested component [" + component + "] does not exist");
    }

    return instance;
  };

  return AbstractVueTransitionController;
}(_transitionController.default);

exports.default = AbstractVueTransitionController;