import EventDispatcher from 'seng-event';
import { IRoute } from '../../lib/interface/IRoute';
import { IAbstractPageTransitionComponent } from '../interface/IAbstractPageTransitionComponent';
/**
 * ### FlowManager
 * The FlowManager is a singleton that is used to trigger page transitions
 * between pages. It is triggered when Vue.js detects a beforeRouteLeave,
 * passes along the next method and calls it when the transition out of the
 * current page has been completed. It can also be used for hijacking the page
 * flow, this will make sure the new page does not transition in until the
 * release method has been called.
 */
export declare class FlowManager extends EventDispatcher {
    /**
     * This property contains a promise that is the transition out method that
     * is called when we leave the page. When the transition out is done this
     * promise will be resolved and the flow is allowed to continue.
     *
     * @public
     */
    transitionOut: Promise<void>;
    /**
     * This property contains the promise that hijacks the flow. When the flow
     * hijack is released this promise will be released as well and the flow is allowed to continue.
     *
     * @public
     */
    flowHijacked: Promise<void>;
    /**
     * This property contains the componentId of the last page/component that was active. The vue-router
     * onLeave method is triggered twice, therefore we store the previous componentId so we can ignore
     * the second time.
     *
     * @private
     */
    private previousComponentId;
    /**
     * If pointer-events none is not supported we inject a div into the DOM that blocks
     * all other click events. This property contains the reference to this element
     *
     * @private
     */
    private pointerDiv;
    /**
     * When the FlowManager is initially constructed it detects if we are using a browser
     * that does not support pointer-events. If it's not supported the fallback div is
     * created and injected into the DOM.
     */
    constructor();
    /**
     * When this method is called it will return a promise with a resolve method
     * that can be called to release the hijack. When the hijack is released the flow will continue.
     *
     * @public
     */
    hijackFlow(): Promise<() => void>;
    /**
     * When the flow is fully done this method should be called. For example when the
     * transition out of the current page is completely done. It will reset the transition
     * out promise, clear the previous component id and re-enable all the pointer events so
     * the user can navigate further.
     *
     * @public
     */
    done(): void;
    /**
     * The vue router triggers the onLeave method twice, so we need to store the current componentId to
     * avoid weird page transition issues. If it's triggered on the same page we release the hijack right away.
     *
     * @public
     * @param {IAbstractPageTransitionComponent} pageInstance The reference to the current page instance
     * @param {(param?: (string | boolean)) => void} release The release method that will allow the vue-router to continue
     * @param {IRoute} to The target route we are navigating to
     * @param {IRoute} from The current route we are navigating away from
     */
    start(pageInstance: IAbstractPageTransitionComponent, release: (param?: string | boolean) => void, to: IRoute, from: IRoute): void;
    /**
     * During page navigation we want to disable all pointer events so the user
     * cannot navigate to another page while the current page switch is still running.
     * This causes major flow issues, might not be the prettiest solution but hey it works!
     *
     * @private
     */
    private disablePointerEvents();
    /**
     * After the flow is completed the pointer events can be enabled again so the
     * user can continue navigating.
     *
     * @private
     */
    private enablePointerEvents();
    /**
     * This method checks if the page we are navigating to is a new component. If the current component
     * shares the same name (for example: when using params to change content) it means it's not a new component and the
     * current component will never leave the DOM!
     *
     * @private
     * @param {IAbstractPageTransitionComponent} pageInstance The reference of the page that we are currently on
     * @param {IRoute} to The route we are about to navigate to
     * @returns {boolean} This indicates if the page we are going to is the same as the page we are currently on
     */
    private isNewPageComponent(pageInstance, to);
    /**
     * This method will probably never be called but if you want to you can dispose of
     * the flow manager and everything will be cleaned.
     *
     * @public
     */
    dispose(): void;
}
/**
 * Create the single instance of the flow manager
 */
declare const flowManager: FlowManager;
export default flowManager;
