"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _AbstractTransitionComponent = _interopRequireDefault(require("./AbstractTransitionComponent"));

var _FlowType = _interopRequireDefault(require("../enum/FlowType"));

var _FlowManager = _interopRequireDefault(require("../util/FlowManager"));

var _default = {
  name: 'AbstractPageTransitionComponent',
  extends: _AbstractTransitionComponent.default,
  beforeCreate: function beforeCreate() {
    this.flow = _FlowType.default.NORMAL;
    this.transitionInHijack = Promise.resolve();
  },
  methods: {
    hijackTransitionIn: function hijackTransitionIn() {
      var _this = this;

      return new Promise(function (resolve) {
        _this.transitionInHijack = new Promise(function (release) {
          return resolve(release);
        });
      });
    }
  },

  /**
   * @description Before the route is entered we trigger the transition in
   * @param to The route we are about to enter
   * @param from The route we left
   * @param next The method that releases the vue-router flow
   */
  beforeRouteEnter: function beforeRouteEnter(to, from, next) {
    /* istanbul ignore next */
    next(function (vm) {
      Promise.all([_FlowManager.default.flowHijacked, vm.transitionInHijack]).then(function () {
        if (vm.$parent && vm.$parent.allComponentsReady) {
          vm.$parent.allComponentsReady.then(function () {
            return vm.transitionIn();
          });
        } else {
          vm.transitionIn();
        }
      });
    });
  },

  /**
   * @description This method is triggered when we navigate to a sub-page of the current existing page
   * @param to The route we are about to enter
   * @param from The route we left
   * @param next The method that releases the vue-router flow
   */
  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {
    // Find the old reference and remove it

    /* istanbul ignore next */
    if (to.name === this.componentId) {
      var index = this.registeredComponents.findIndex(function (component) {
        return component.componentId === from.name;
      });

      if (index > -1) {
        this.registeredComponents.splice(index);
      }
    } // Release the before update hook


    next();
  },

  /**
   * @description This method handles the default page switches
   * @param to The route we are about to enter
   * @param from The route we left
   * @param next The method that releases the vue-router flow
   */
  beforeRouteLeave: function beforeRouteLeave(to, from, next) {
    var _this2 = this;

    /* istanbul ignore next */
    to.matched.forEach(function (routeObject, index) {
      if (index === to.matched.length - 1) {
        if (routeObject.beforeEnter) {
          routeObject.beforeEnter(to, from, function (guardResolveValue) {
            if (guardResolveValue === from.path) {
              next(false);
            } else {
              _FlowManager.default.start(_this2, next, to, from);
            }
          });
        } else {
          _FlowManager.default.start(_this2, next, to, from);
        }
      }
    });
  }
};
exports.default = _default;